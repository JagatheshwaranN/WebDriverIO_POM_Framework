"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLinkByTemplate = exports.getErrorFromFailedTest = exports.tellReporter = exports.isMochaAllHooks = exports.isMochaEachHooks = exports.isEmpty = exports.getTestStatus = void 0;
const process_1 = __importDefault(require("process"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const compoundError_1 = __importDefault(require("./compoundError"));
const constants_1 = require("./constants");
/**
 * Get allure test status by TestStat object
 * @param test {Object} - TestStat object
 * @param config {Object} - wdio config object
 * @private
 */
exports.getTestStatus = (test, config) => {
    if (config && config.framework === 'jasmine') {
        return 'failed';
    }
    if (test.error) {
        if (test.error.message) {
            const message = test.error.message.trim().toLowerCase();
            return (message.startsWith('assertionerror') || message.includes('expect')) ? 'failed' : 'broken';
        }
        if (test.error.stack) {
            const stackTrace = test.error.stack.trim().toLowerCase();
            return (stackTrace.startsWith('assertionerror') || stackTrace.includes('expect')) ? 'failed' : 'broken';
        }
    }
    return 'broken';
};
/**
 * Check is object is empty
 * @param object {Object}
 * @private
 */
exports.isEmpty = (object) => !object || Object.keys(object).length === 0;
/**
 * Is mocha beforeEach / afterEach hook
 * @param title {String} - hook title
 * @returns {boolean}
 * @private
 */
exports.isMochaEachHooks = (title) => constants_1.mochaEachHooks.some(hook => title.includes(hook));
/**
 * Is mocha beforeAll / afterAll hook
 * @param title {String} - hook title
 * @returns {boolean}
 * @private
 */
exports.isMochaAllHooks = (title) => constants_1.mochaAllHooks.some(hook => title.includes(hook));
/**
 * Call reporter
 * @param {string} event  - event name
 * @param {Object} msg - event payload
 * @private
 */
exports.tellReporter = (event, msg = {}) => {
    // Node 14 typings does not accept string in process.emit, but allow string in process.on
    process_1.default.emit(event, msg);
};
/**
 * Properly format error from different test runners
 * @param {Object} test - TestStat object
 * @returns {Object} - error object
 * @private
 */
exports.getErrorFromFailedTest = (test) => {
    if (test.errors && Array.isArray(test.errors)) {
        for (let i = 0; i < test.errors.length; i += 1) {
            if (test.errors[i].message)
                test.errors[i].message = strip_ansi_1.default(test.errors[i].message);
            if (test.errors[i].stack)
                test.errors[i].stack = strip_ansi_1.default(test.errors[i].stack);
        }
        return test.errors.length === 1 ? test.errors[0] : new compoundError_1.default(...test.errors);
    }
    if (test.error) {
        if (test.error.message)
            test.error.message = strip_ansi_1.default(test.error.message);
        if (test.error.stack)
            test.error.stack = strip_ansi_1.default(test.error.stack);
    }
    return test.error;
};
/**
 * Substitute task id to link template
 * @param {string} template - link template
 * @param {string} id - task id
 * @returns {string} - link after substitution
 * @private
 */
exports.getLinkByTemplate = (template, id) => {
    if (typeof template !== 'string') {
        return id;
    }
    if (!template.includes(constants_1.linkPlaceholder)) {
        throw Error(`The link template "${template}" must contain ${constants_1.linkPlaceholder} substring.`);
    }
    return template.replace(constants_1.linkPlaceholder, id);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQTZCO0FBQzdCLDREQUFrQztBQUlsQyxvRUFBMkM7QUFDM0MsMkNBQTRFO0FBRzVFOzs7OztHQUtHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsQ0FBQyxJQUEyQixFQUFFLE1BQTJCLEVBQVcsRUFBRTtJQUMvRixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUMxQyxPQUFPLFFBQVEsQ0FBQTtLQUNsQjtJQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNaLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDcEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDdkQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFBO1NBQ3BHO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNsQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUN4RCxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7U0FDMUc7S0FDSjtJQUVELE9BQU8sUUFBUSxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVEOzs7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